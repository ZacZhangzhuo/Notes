(function($){
/**
 * To make a form auto submit, all you have to do is 3 things:
 *
 * ctools_add_js('auto-submit');
 *
 * On gadgets you want to auto-submit when changed, add the ctools-auto-submit
 * class. With FAPI, add:
 * @code
 *  '#attributes' => array('class' => array('ctools-auto-submit')),
 * @endcode
 *
 * If you want to have auto-submit for every form element,
 * add the ctools-auto-submit-full-form to the form. With FAPI, add:
 * @code
 *   '#attributes' => array('class' => array('ctools-auto-submit-full-form')),
 * @endcode
 *
 * If you want to exclude a field from the ctool-auto-submit-full-form auto submission,
 * add the class ctools-auto-submit-exclude to the form element. With FAPI, add:
 * @code
 *   '#attributes' => array('class' => array('ctools-auto-submit-exclude')),
 * @endcode
 *
 * Finally, you have to identify which button you want clicked for autosubmit.
 * The behavior of this button will be honored if it's ajaxy or not:
 * @code
 *  '#attributes' => array('class' => array('ctools-use-ajax', 'ctools-auto-submit-click')),
 * @endcode
 *
 * Currently only 'select', 'radio', 'checkbox' and 'textfield' types are supported. We probably
 * could use additional support for HTML5 input types.
 */

Drupal.behaviors.CToolsAutoSubmit = {
  attach: function(context) {
    // 'this' references the form element
    function triggerSubmit (e) {
      if ($.contains(document.body, this)) {
        var $this = $(this);
        if (!$this.hasClass('ctools-ajaxing')) {
          $this.find('.ctools-auto-submit-click').click();
        }
      }
    }

    // the change event bubbles so we only need to bind it to the outer form
    $('form.ctools-auto-submit-full-form', context)
      .add('.ctools-auto-submit', context)
      .filter('form, select, input:not(:text, :submit)')
      .once('ctools-auto-submit')
      .change(function (e) {
        // don't trigger on text change for full-form
        if ($(e.target).is(':not(:text, :submit, .ctools-auto-submit-exclude)')) {
          triggerSubmit.call(e.target.form);
        }
      });

    // e.keyCode: key
    var discardKeyCode = [
      16, // shift
      17, // ctrl
      18, // alt
      20, // caps lock
      33, // page up
      34, // page down
      35, // end
      36, // home
      37, // left arrow
      38, // up arrow
      39, // right arrow
      40, // down arrow
       9, // tab
      13, // enter
      27  // esc
    ];
    // Don't wait for change event on textfields
    $('.ctools-auto-submit-full-form input:text, input:text.ctools-auto-submit', context)
      .filter(':not(.ctools-auto-submit-exclude)')
      .once('ctools-auto-submit', function () {
        // each textinput element has his own timeout
        var timeoutID = 0;
        var timer = 500;
        if ($(this).hasClass('ctools-auto-submit-delayed')) {
          timer = 3000;
        }        
        $(this)
          .bind('keydown keyup', function (e) {
            if ($.inArray(e.keyCode, discardKeyCode) === -1) {
              timeoutID && clearTimeout(timeoutID);
            }
          })
          .keyup(function(e) {
            if ($.inArray(e.keyCode, discardKeyCode) === -1) {
              timeoutID = setTimeout($.proxy(triggerSubmit, this.form), timer);
            }
          })
          .bind('change', function (e) {
            if ($.inArray(e.keyCode, discardKeyCode) === -1) {
              timeoutID = setTimeout($.proxy(triggerSubmit, this.form), timer);
            }
          });
      });
  }
}
})(jQuery);
;
(function(Drupal, $) {
  "use strict";

  $.authcache_cookie = function(name, value, lifetime) {
    lifetime = (typeof lifetime === 'undefined') ? Drupal.settings.authcache.cl : lifetime;
    $.cookie(name, value, $.extend(Drupal.settings.authcache.cp, {expires: lifetime}));
  };
}(Drupal, jQuery));
;
/**
 * @file
 * Defines the behavior of the Memcache Admin module.
 */

(function ($) {

  'use strict';

  /**
   * Append the memcache debug info to the page.
   *
   * @type {Drupal~behavior}
   */
  Drupal.behaviors.memcacheAdmin = {
    attach: function attach() {
      $("body").append($("#memcache-devel"));
    }
  };

})(jQuery);
;
(function ($) {
Drupal.behaviors.lang_dropdown = {
  attach: function (context, settings) {
    var settings = settings || Drupal.settings;

    if (settings.lang_dropdown) {
      var flags, msddSettings;
      for (key in settings.lang_dropdown) {
        msddSettings = settings.lang_dropdown[key].jsWidget;
        flags = msddSettings.languageicons;
        if (flags) {
          $.each(flags, function(index, value) {
            if (msddSettings.widget == "msdropdown") {
              $('select#lang-dropdown-select-' + key + ' option[value="' + index + '"]', context).attr('data-image', value);
            }
            else if (msddSettings.widget == "ddslick" && Boolean(msddSettings.showSelectedHTML)) {
              $('select#lang-dropdown-select-' + key + ' option[value="' + index + '"]', context).attr('data-imagesrc', value);
            }
          });
        }

        if (msddSettings.widget == "msdropdown") {
          try {
            $('select#lang-dropdown-select-' + key, context).msDropDown({
              visibleRows: msddSettings.visibleRows,
              roundedCorner: Boolean(msddSettings.roundedCorner),
              animStyle: msddSettings.animStyle,
              event: msddSettings.event,
              mainCSS: msddSettings.mainCSS
            });
          }
          catch (e) {
            if (console) { console.log(e); }
          }
        }
        else if (msddSettings.widget == "chosen") {
          $('select#lang-dropdown-select-' + key, context).chosen({
            disable_search: msddSettings.disable_search,
            no_results_text: msddSettings.no_results_text
          });
        }
        else if (msddSettings.widget == "ddslick") {
          $('select#lang-dropdown-select-' + key, context).ddslick({
            width: (msddSettings.width == 0) ? null : msddSettings.width,
            height: (msddSettings.height == 0) ? null : msddSettings.height,
            showSelectedHTML: Boolean(msddSettings.showSelectedHTML),
            imagePosition: msddSettings.imagePosition,
            onSelected: function(data) {
              // ddselect also fires this function on initialization, so we have
              // to make sure this select has already been initialized.
              if (!data.selectedItem.parent().data('ddslick-has-been-initialized')) {
                data.selectedItem.parent().data('ddslick-has-been-initialized', true);
                return;
              }

              var lang = data.selectedData.value;
              var href = $('#lang-dropdown-select-'+key, context).parents('form').find('input[name="' + lang + '"]').val();
              window.location.href = href;
            }
          });
        }
      }
    }

    $('select.lang-dropdown-select-element', context).change(function() {
      var lang = this.options[this.selectedIndex].value;
      var href = $(this).closest('form').find('input[name="' + lang + '"]').val();
      window.location.href = href;
    });

    $('form.lang-dropdown-form', context).after('<div style="clear:both;"></div>');
  }
};
})(jQuery);
;
(function (window) {

    function _registerEvent(target, eventType, cb) {
        if (target.addEventListener) {
            target.addEventListener(eventType, cb);
            return {
                remove: function () {
                    target.removeEventListener(eventType, cb);
                }
            };
        } else {
            target.attachEvent(eventType, cb);
            return {
                remove: function () {
                    target.detachEvent(eventType, cb);
                }
            };
        }
    }

    function _createHiddenIframe(target, uri) {
        var iframe = document.createElement("iframe");
        iframe.src = uri;
        iframe.id = "hiddenIframe";
        iframe.style.display = "none";
        target.appendChild(iframe);
        return iframe;
    }

    function openUriWithHiddenFrame(uri, successCb, failCb) {

        var timeout = setTimeout(function () {
            failCb();
            handler.remove();
        }, 1000);

        var iframe = document.querySelector("#hiddenIframe");
        if (!iframe) {
            iframe = _createHiddenIframe(document.body, "about:blank");
        }

        var handler = _registerEvent(window, "blur", onBlur);

        function onBlur() {
            clearTimeout(timeout);
            handler.remove();
            successCb()
        }

        iframe.contentWindow.location.href = uri;
    }

    function openUriWithTimeoutHack(uri, successCb, failCb) {

        var timeout = setTimeout(function () {
            failCb();
            handler.remove();
        }, 1000);

        var handler = _registerEvent(window, "blur", onBlur);

        function onBlur() {
            clearTimeout(timeout);
            handler.remove();
            successCb()
        }
        window.location = uri;

    }

    function openUriUsingFirefox(uri, successCb, failCb) {
        var iframe = document.querySelector("#hiddenIframe");
        if (!iframe) {
            iframe = _createHiddenIframe(document.body, "about:blank");
        }
        try {
            iframe.contentWindow.location.href = uri;
            successCb();
        } catch (e) {
            if (e.name == "NS_ERROR_UNKNOWN_PROTOCOL") {
                failCb();
            }
            else {
                successCb();
            }
        }
    }

    function openUriUsingIEInOlderWindows(uri, failCb) {
        if (getInternetExplorerVersion() === 10) {
            openUriUsingIE10InWindows7(uri, failCb);
        } else if (getInternetExplorerVersion() === 9 || getInternetExplorerVersion() === 11) {
            openUriWithHiddenFrame(uri, failCb);
        } else {
            openUriInNewWindowHack(uri, failCb);
        }
    }

    function openUriUsingIE10InWindows7(uri, successCb, failCb) {
        var timeout = setTimeout(failCb, 1000);
        window.addEventListener("blur", function () {
            clearTimeout(timeout);
        });

        var iframe = document.querySelector("#hiddenIframe");
        if (!iframe) {
            iframe = _createHiddenIframe(document.body, "about:blank");
        }
        try {
            iframe.contentWindow.location.href = uri;
            successCb()
        } catch (e) {
            failCb();
            clearTimeout(timeout);
        }
    }

    function openUriInNewWindowHack(uri, successCb, failCb) {
        var myWindow = window.open('', '', 'width=0,height=0');

        myWindow.document.write("<iframe src='" + uri + "'></iframe>");
        setTimeout(function () {
            try {
                myWindow.location.href;
                myWindow.setTimeout("window.close()", 1000);
                successCb()
            } catch (e) {
                myWindow.close();
                failCb();
            }
        }, 1000);
    }

    function openUriWithMsLaunchUri(uri, successCb, failCb) {
        navigator.msLaunchUri(uri,
            successCb,
            failCb
        );
    }

    function checkBrowser() {
        var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
        return {
            isOpera: isOpera,
            isFirefox: typeof InstallTrigger !== 'undefined',
            isSafari: Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0,
            isChrome: !!window.chrome && !isOpera,
            isIE: /*@cc_on!@*/false || !!document.documentMode   // At least IE6
        }
    }

    function getInternetExplorerVersion() {
        var rv = -1;
        if (navigator.appName === "Microsoft Internet Explorer") {
            var ua = navigator.userAgent;
            var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null)
                rv = parseFloat(RegExp.$1);
        }
        else if (navigator.appName === "Netscape") {
            var ua = navigator.userAgent;
            var re = new RegExp("Trident/.*rv:([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null) {
                rv = parseFloat(RegExp.$1);
            }
        }
        return rv;
    }
    window.openUriWithTimeoutHack = openUriWithTimeoutHack;
    window.protocolCheck = function (uri, successCb, failCb) {
        function successCallBack() {
            successCb && successCb();
        }
        function failCallback() {
            failCb && failCb();
        }

        if (navigator.msLaunchUri) { //for IE and Edge in Win 8 and Win 10
            openUriWithMsLaunchUri(uri, successCb, failCb);
        } else {
            var browser = checkBrowser();

            if (browser.isFirefox) {
                openUriUsingFirefox(uri, successCallBack, failCallback);
            } else if (browser.isChrome) {
                openUriWithTimeoutHack(uri, successCallBack, failCallback);
            } else if (browser.isIE) {
                openUriUsingIEInOlderWindows(uri, successCallBack, failCallback);
            } else {
                //not supported, implement please
            }
        }
    }
}(window));;
/**
 * @file
 *
 * Fivestar JavaScript behaviors integration.
 */

/**
 * Create a degradeable star rating interface out of a simple form structure.
 *
 * Originally based on the Star Rating jQuery plugin by Wil Stuckey:
 * http://sandbox.wilstuckey.com/jquery-ratings/
 */
(function($){ // Create local scope.

Drupal.behaviors.fivestar = {
  attach: function (context) {
    $(context).find('div.fivestar-form-item').once('fivestar', function() {
      var $this = $(this);
      var $container = $('<div class="fivestar-widget clearfix"></div>');
      var $select = $('select', $this);

      // Setup the cancel button
      var $cancel = $('option[value="0"]', $this);
      if ($cancel.length) {
        $('<div class="cancel"><a href="#0" title="' + $cancel.text() + '">' + $cancel.text() + '</a></div>')
          .appendTo($container);
      }

      // Setup the rating buttons
      var $options = $('option', $this).not('[value="-"], [value="0"]');
      var index = -1;
      $options.each(function(i, element) {
        var classes = 'star-' + (i+1);
        classes += (i + 1) % 2 == 0 ? ' even' : ' odd';
        classes += i == 0 ? ' star-first' : '';
        classes += i + 1 == $options.length ? ' star-last' : '';
        $('<div class="star"><a href="#' + element.value + '" title="' + element.text + '">' + element.text + '</a></div>')
          .addClass(classes)
          .appendTo($container);
        if (element.value == $select.val()) {
          index = i + 1;
        }
      });

      if (index != -1) {
        $container.find('.star').slice(0, index).addClass('on');
      }
      $container.addClass('fivestar-widget-' + ($options.length));
      $container.find('a')
        .bind('click', $this, Drupal.behaviors.fivestar.rate)
        .bind('mouseover', $this, Drupal.behaviors.fivestar.hover);

      $container.bind('mouseover mouseout', $this, Drupal.behaviors.fivestar.hover);

      // Attach the new widget and hide the existing widget.
      $select.after($container).css('display', 'none');

      // Allow other modules to modify the widget.
      Drupal.attachBehaviors($this);
    });
  },
  rate: function(event) {
    var $this = $(this);
    var $widget = event.data;
    var value = this.hash.replace('#', '');
    $('select', $widget).val(value).change();
    var $this_star = (value == 0) ? $this.parent().parent().find('.star') : $this.closest('.star');
    $this_star.prevAll('.star').andSelf().addClass('on');
    $this_star.nextAll('.star').removeClass('on');
    if(value==0){
      $this_star.removeClass('on');
    }
    event.preventDefault();
  },
  hover: function(event) {
    var $this = $(this);
    var $widget = event.data;
    var $target = $(event.target);
    var $stars = $('.star', $this);

    if (event.type == 'mouseover') {
      var index = $stars.index($target.parent());
      $stars.each(function(i, element) {
        if (i <= index) {
          $(element).addClass('hover');
        } else {
          $(element).removeClass('hover');
        }
      });
    } else {
      $stars.removeClass('hover');
    }
  }
};

})(jQuery);
;
(function($) 
{ 
	$(function() 
	{
		$('.disabled-field').attr('disabled', true);
		$( "#app-node-form" ).submit(function( event ) {		
	    $('.disabled-field').attr('disabled', false);
		});    
  });
})(jQuery);
function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}
/* REGISTER_FORM */
(function($) 
{ 
  $(document).ready(function () {
      $('input.disablecopypaste').bind('copy paste', function (e) {
         e.preventDefault();
      });
    });
})(jQuery);
/*  END REGISTER_FORM */
/* ANCHOR SCROLL */
function moveToAnchor()
{  
  var target = window.location.hash;
  if ( target != '' )
  {
      var $target = jQuery(target); 
      jQuery('html, body').stop().delay(800).animate({
      'scrollTop': $target.offset().top - 50}, // set offset value here i.e. 50
      900);
      if (target.startsWith("#comment"))
      {        
        var parts = target.split('-');
        var id=parts[1];
        var $article=jQuery("#article-"+id);
        $article.addClass("anchored");
      }
  }  
}
/* END ANCHOR SCROLL */
/* RESOURCES */
function  changeHelpTextAllowedFileTypeForResource()
{
	(function( $ ) 	
	{	
		if($("div.pane-node-field-file div.description").length)
		{		
			var textHtml=$("div.pane-node-field-file div.description").html();
			var textHtmlSplitted=textHtml.split("<br>");
			var firstSentence=textHtmlSplitted[0];
		  var extensions=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("extensions");
		  var textAllowedFiles=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("textAllowedFiles");
		  var value = $('#edit-field-term-reference-type-und').find(":selected").attr("value");		
			var dataArray = extensions.split(";");
			for(i = 0; i < dataArray.length; i++)
			{
				var dataStrItem=dataArray[i];
				var tidValue=dataStrItem.split("-");
				if(tidValue[0]==value)
				{
					$("div.pane-node-field-file div.description").html(firstSentence+"<br>"+textAllowedFiles+" <strong>"+tidValue[1]+"</strong>");
					return;
				}
			} 
		}
	})( jQuery );			 
}
function checkLicenseRequired(selection,tidRequired,textNotRequired,textRequired,tooltipWithOtherLicense,tooltipWithOutOtherLicense)
{
	(function( $ ) 	
	{
		var value = selection.value;
		var selectorIdWithValue="#edit-field-license-und option[value='"+value+"']";
		if(value==tidRequired)
		{
			//$("label[for='edit-field-license-und']").html(textNotRequired+textRequired);
			$("label[for='edit-field-license-agreement-en-0']").html(textNotRequired+textRequired);
			$("#edit-field-license-agreement-en-0").html(textNotRequired+textRequired);						
			$("#edit-field-license-agreement").show();
		}
		else 
		{			
			//$("label[for='edit-field-license-und']").html(textNotRequired);
			$("label[for='edit-field-license-agreement-en-0']").html(textNotRequired);
			$("#edit-field-license-agreement-en-0").html(textNotRequired);						
			$("#edit-field-license-agreement").hide();
		}
	})( jQuery );				
}
function changeSubmit(textSubmit)
{
	(function( $ ) 	
	{		             		             
		$("#edit-submit").attr("value",textSubmit);
	})( jQuery );		
}
function addRequiredFieldMarkInFiles(textReqDQ)
{
	(function( $ ) 	
	{		             		             
		$("input[id^=edit-field-files-und-]").each(function( index ) 
		{
			var id = $(this).attr("id");			
			if($("#"+id).hasClass("error"))
			{
				if(id.indexOf("-url")!== -1)
				{
					id=id.replace("-url","");
				}
				var currentTitle=$("label[for='"+id+"']").html();
				if(currentTitle.indexOf("form-required") == -1)
				{
					$("label[for='"+id+"']").html(currentTitle+textReqDQ);
				}				
			}
		});
		$("textarea[id^=edit-field-files-und-]").each(function( index ) 
		{
			var id = $(this).attr("id");
			if($("#"+id).hasClass("error"))
			{
				var currentTitle=$("label[for='"+id+"']").html();
				if(currentTitle.indexOf("form-required") == -1)
				{
					$("label[for='"+id+"']").html(currentTitle+textReqDQ);
				}
			}
		});		
		$("select[id^=edit-field-files-und-]").each(function( index ) 
		{
			var id = $(this).attr("id");
			if($("#"+id).hasClass("error"))
			{
				var currentTitle=$("label[for='"+id+"']").html();
				if(currentTitle.indexOf("form-required") == -1)
				{
					$("label[for='"+id+"']").html(currentTitle+textReqDQ);
				}
			}
		});
	})( jQuery );		
}
function checkVisibilityOfLicenseFieldGroup(tidOfLicenseThatRequiresUrl)
{
	(function( $ ) 	
	{		
		var value = $('#edit-field-term-reference-type-und').find(":selected").attr("value");			
		var valueLicenseSelected = $('#edit-field-license-und').find(":selected").attr("value");			
		if(value=="_none")
		{
			$("#edit-field-license-und option[value='_none']").attr('selected', true);
			$("#edit-field-license-und").prop('selectedIndex', 0);
			$("#edit-field-license").hide();	
			$("#edit-field-license-agreement").hide();		
		}
		else 
		{				
			var valueSelected="";
			var dataStr=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("dataLicenses");
			var otherLicenseTid=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("otherLicenseTid");			
			var tooltipWithOtherLicense=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("tooltipWithOtherLicense");			
			var tooltipWithOutOtherLicense=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("tooltipWithOutOtherLicense");			
			var dataArray = dataStr.split(";");
			var needLicenseFieldActive=false;
			var isOtherLicensePresent=false;			
			for(i = 0; i < dataArray.length; i++)
			{
				var dataStrItem=dataArray[i];
				var dataStrItemParts=dataStrItem.split("-");
				var licenseTid=dataStrItemParts[0];
				var resourceTypeTids=""+dataStrItemParts[1];			
				var selectorIdWithValue="#edit-field-license-und option[value='"+licenseTid+"']";
				if( !(resourceTypeTids.includes(value)))		
				{					
					$(selectorIdWithValue).hide();
				}
				else 
				{
					$(selectorIdWithValue).show();	
					needLicenseFieldActive=true;	
					if(licenseTid==otherLicenseTid)
					{
						isOtherLicensePresent=true;
					}							
				}
			}		
			if(needLicenseFieldActive)	
			{
				$("#edit-field-license").show();																
			}
			else 
			{
				$("#edit-field-license").hide();
			}
			if(isOtherLicensePresent==true)																				
			{
				$(".form-item-field-license-und > .description").html(tooltipWithOtherLicense);				
			}
			else 
			{
				$(".form-item-field-license-und > .description").html(tooltipWithOutOtherLicense);				
			}			
			if(valueLicenseSelected==tidOfLicenseThatRequiresUrl)
			{
				$("#edit-field-license-agreement").show();																			
			}						
		}	
	})( jQuery );		
}
function checkLicensesForResource()
{
	(function( $ ) 	
	{		
		var value = $('#edit-field-term-reference-type-und').find(":selected").attr("value");				 
		if(value=="_none")
		{
			$("#edit-field-license-und option[value='_none']").attr('selected', true);
			$("#edit-field-license-und").prop('selectedIndex', 0);
			$("#edit-field-license").hide();	
			$("#edit-field-license-agreement").hide();																				
		}
		else 
		{
			
			var valueSelected="";
			var dataStr=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("dataLicenses");
			var otherLicenseTid=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("otherLicenseTid");			
			var tooltipWithOtherLicense=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("tooltipWithOtherLicense");			
			var tooltipWithOutOtherLicense=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("tooltipWithOutOtherLicense");			
						
			var dataArray = dataStr.split(";");
			var needLicenseFieldActive=false;
			var isOtherLicensePresent=false;
			for(i = 0; i < dataArray.length; i++)
			{
				var dataStrItem=dataArray[i];
				var dataStrItemParts=dataStrItem.split("-");
				var licenseTid=dataStrItemParts[0];
				var resourceTypeTids=""+dataStrItemParts[1];			
				var selectorIdWithValue="#edit-field-license-und option[value='"+licenseTid+"']";
				if( !(resourceTypeTids.includes(value)))		
				{					
					$(selectorIdWithValue).hide();
				}
				else 
				{
					$(selectorIdWithValue).show();	
					needLicenseFieldActive=true;		
					if(licenseTid==otherLicenseTid)
					{
						isOtherLicensePresent=true;
					}						
				}
			}		
			if(needLicenseFieldActive)	
			{
				$("#edit-field-license").show();																
			}
			else 
			{
				$("#edit-field-license").hide();
			}
			if(isOtherLicensePresent==true)																				
			{
				$(".form-item-field-license-und > .description").html(tooltipWithOtherLicense);				
			}
			else 
			{
				$(".form-item-field-license-und > .description").html(tooltipWithOutOtherLicense);				
			}
			$("#edit-field-license-und option[value='_none']").attr('selected', true);
			$("#edit-field-license-und").prop('selectedIndex', 0);	
			$("#edit-field-license-agreement").hide();		
			
		}
			
	})( jQuery );		
}
function checkThumbnailRequired(selection,title,materialName,materialAdvice,titleReq)
{
		var value = selection.value;  
		var valueSelected="";
		var text=selection.options[selection.selectedIndex].text;
		var dataStr=document.getElementsByName("field_term_reference_type[und]")[0].getAttribute("data");
		var required=false;
		var dataArray = dataStr.split(",");
		for(i = 0; i < dataArray.length; i++)
		{
			var dataStrItem=dataArray[i];
			var tidValue=dataStrItem.split("-");
			if(tidValue[0]==value)
			{
				if(tidValue[1]=="1")
				{
					required=false;
				}
				else
				{
				  valueSelected=value;
					required=true;
				}
			}
		}
		var matches = document.querySelectorAll('label[for]');	
		for (i = 0; i < matches.length; ++i) 
		{
			if(matches[i].getAttribute("for")=='edit-field-image-preview-und-0-upload')
			{
				if(required==false)
				{
					matches[i].innerHTML=title;				
				}
				else
				{
					matches[i].innerHTML=title+" "+titleReq;
				}			
			}
		}	
		if (text==materialName)
		{		
		  document.getElementById("edit-field-term-reference-type-und").insertAdjacentHTML("afterend",materialAdvice);
		}	
		else
	  {
	    if(document.getElementById('material-tip') !== null)
	    {
	      document.getElementById("material-tip").remove();  
	    }    
	  }
	  changeHelpTextAllowedFileTypeForResource();
	  checkLicensesForResource();
}
/* STATS */
function getUrlStats(nid,language,startDate,endDate,elementId,type)
{	
	(function( $ ) 	
	{		
		$('#'+elementId).html("<img src='/s3fs-images/f4r/images/icons/loading.gif' srcset='/s3fs-images/f4r/images_high_res/icons/loading.gif'/>"); 		
		$.ajax({
        url: '/node/getstats/'+nid+'/'+language+'/'+startDate+'/'+endDate+'/'+type,
        type: 'GET',
        dataType: 'text',        
        timeout: 30000,
        error: function(){
            $('#'+elementId).html("No data");
        },
        success: function(data)
        { 
            $('#'+elementId).html(data);
        }
    });
		
	})( jQuery );
}
function trackOutboundLink(path,destination)
{
	//_gaq.push(["_trackPageview",path],function() { window.open(destination,'_blank'); });		
	// Drupal.settings.google_analytics, Drupal.settings.google_analytics_ga4
	//gtag('event', 'page_view', 
	//{	  
	//  page_path: path
	//});
	gtag('event', 'page_view', 
	{
    page_title: 'Banners '+path.substring(path.lastIndexOf('/') + 1),
    page_location: path,
    page_path: path,
    send_to: Drupal.settings.google_analytics
	});
	gtag('event', 'page_view', 
	{
    page_title: 'Banners '+path.substring(path.lastIndexOf('/') + 1),
    page_location: path,
    page_path: path,
    send_to: Drupal.settings.google_analytics_ga4
	});
	
	setTimeout(function () {
        window.open(destination,'_blank'); //will redirect to your blog page (an ex: blog.html)
  }, 1000);
	
	//_gaq.push(["_trackPageview",dataga]);
	//_gaq('send', 'pageview', path);
	//setTimeout(function () 
	//{
  //window.open(destination,'_self'); //will redirect to your blog page (an ex: blog.html)
  //}, 2000);
  return false;  
}
function trackRegister()
{  
 //_gaq.push(["_trackPageview","/users/register-confirmation"],function() { setTimeout(function() {         document.location.href="/";        }, 3000); });		
 (function($) 
 {
  $(document).ready(function() 
  {
  		
      //_gaq.push(["_trackPageview","/users/register-confirmation"],function() { setTimeout(function() {         document.location.href="/";        }, 3000); });		
      //gtag('set', 'page_path', "/users/register-confirmation");
			//gtag('event', 'page_view');
      //_gaq('send', 'pageview', "/users/register-confirmation");
			gtag('event', 'page_view', 
			{
		    page_title: 'User Registration',
		    page_location: "/users/register-confirmation",
		    page_path: "/users/register-confirmation",
		    send_to: Drupal.settings.google_analytics
			});
			gtag('event', 'page_view', 
			{
		    page_title: 'User Registration',
		    page_location: "/users/register-confirmation",
		    page_path: "/users/register-confirmation",
		    send_to: Drupal.settings.google_analytics_ga4
			});
    	setTimeout(function () {
       document.location.href="/"; //will redirect to your blog page (an ex: blog.html)
    }, 3000); 
  })
 })(jQuery);
}
function checkBrowser() 
{
  var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
  return {
      isOpera: isOpera,
      isFirefox: typeof InstallTrigger !== 'undefined',
      isSafari: Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0,
      isChrome: !!window.chrome && !isOpera,
      isIE: /*@cc_on!@*/false || !!document.documentMode   // At least IE6
  }
}
function trackDownloads(source)
{
	var attr = source.attributes,
		                //href = attr.dataurl.value,
		                pathUrl= Drupal.settings.ajaxCallBackPrefix+"/node/update-downloads/"+attr.data.value,
		                //elem = href.split('/'),
		                //elem = elem[elem.length - 1];
		                dataga=attr.dataga.value;
		                //_gaq.push(["_trackPageview",dataga]);
		                //ga('send', 'pageview', dataga);
										gtag('event', 'page_view', 
										{
									    page_title: dataga,
									    page_location: dataga,
									    page_path: dataga,
									    send_to: Drupal.settings.google_analytics
										});
										gtag('event', 'page_view', 
										{
									    page_title: dataga,
									    page_location: dataga,
									    page_path: dataga,
									    send_to: Drupal.settings.google_analytics_ga4
										});										
		                if(attr.hreforig==undefined)
		                {
		                  hreforig='';
		                }
		                else
	                  {
                      hreforig=attr.hreforig.value; 
                      hrefalt=attr.hrefalt.value; 
	                  }
		            // Send the download file name and only after completing the request let the user download the file

	(function( $ ) {
		$.ajax(
		            {
		                type : "POST",
		                async:    true,
		                dataType : "text",
		                // 'your_php_file' must be an ABSOLUT or RELATIVE path!
		                url: pathUrl,
		                // 'elem' is a variable containing the download name
		                // you can call it in your php file through $_POST['download_name']
		                //data: { download_name: elem },
		                // here we go magic:
		                // after the request is done run the popup for the download
		                complete: function()
		                {
		                    //window.location.href = href;
		                    //window.location.assign(href);
		                    //window.open(href,'downloads');
		                    if (hreforig!='')
		                    {
		                      window.protocolCheck(hreforig,
                          function () 
                          {                   
                            window.location.href=hreforig;          
                          },
                          function () 
                          { 
                            //alert("You need Rhino installed to open this link.");                           
                            window.location.href=hrefalt;    
                            testUrl=false;                           
                          }
                          ),
                          function () 
                          {           
                            //alert("You need Rhino installed to open this link.");                    
                            window.location.href=hrefalt;  
                            testUrl=false;                           
                          }
                          ; 
		                    }
		                }
		            }
		            )
	})( jQuery );
}
function trackDownloads2(source)
{
	var attr = source.attributes,
		                //href = attr.dataurl.value,
		                pathUrl= Drupal.settings.ajaxCallBackPrefix+"/node/update-downloads/"+attr.data.value,
		                //elem = href.split('/'),
		                //elem = elem[elem.length - 1];
		                dataga=attr.dataga.value;
		                //_gaq.push(["_trackPageview",dataga]);
										gtag('event', 'page_view', 
										{
									    page_title: dataga,
									    page_location: dataga,
									    page_path: dataga,
									    send_to: Drupal.settings.google_analytics
										});
										gtag('event', 'page_view', 
										{
									    page_title: dataga,
									    page_location: dataga,
									    page_path: dataga,
									    send_to: Drupal.settings.google_analytics_ga4
										});		                
		                //ga('send', 'pageview', dataga);
		                if(attr.hreforig==undefined)
		                {
		                  hreforig='';
		                }
		                else
	                  {
                      hreforig=attr.hreforig.value; 
                      hrefalt=attr.hrefalt.value; 
	                  }
		            // Send the download file name and only after completing the request let the user download the file

	(function( $ ) {
		$.ajax(
		            {
		                type : "POST",
		                async:    true,
		                dataType : "text",
		                // 'your_php_file' must be an ABSOLUT or RELATIVE path!
		                url: pathUrl,
		                // 'elem' is a variable containing the download name
		                // you can call it in your php file through $_POST['download_name']
		                //data: { download_name: elem },
		                // here we go magic:
		                // after the request is done run the popup for the download
		                complete: function()
		                {
		                    //window.location.href = href;
		                    //window.location.assign(href);
		                    //window.open(href,'downloads');
		                    if (hreforig!='')
		                    {
		                    	var supportedBrowser=true;
		                    	if (!navigator.msLaunchUri)
		                    	{
		                    		var browser = checkBrowser();
            								if (browser.isFirefox) 
            								{
            									var userAgent = navigator.userAgent.toLowerCase();
															var matches = userAgent.match(/firefox\/([0-9]+\.*[0-9]*)/);
															if(matches[1]>64)
															{
																supportedBrowser=false;
															}
            								}
		                    	}
		                    	if(supportedBrowser)
		                    	{
														window.protocolCheck(hreforig,
	                          function () 
	                          {                   
	                            window.location.href=hreforig;          
	                          },
	                          function () 
	                          { 
		                          $('#rhinoModal').appendTo('body').modal();                          
	                            //window.location.href=hrefalt;    
	                            testUrl=false;                           
	                          }
	                          ),
	                          function () 
	                          {           
		                          $('#rhinoModal').appendTo('body').modal();                         
	                            //window.location.href=hrefalt;  
	                            testUrl=false;                           
	                          }
	                          ;		                    		
		                    	}
		                    	else 
		                    	{
	                    			$('#rhinoModal').appendTo('body').modal();                         
                            //window.location.href=hrefalt;  
                            testUrl=false;    
		                    	}		                       
		                    }
		                }
		            }
		            )
	})( jQuery );
}
function updateUserTermsUpdateDate(source)
{
	var attr = source.attributes,
		         pathUrl= Drupal.settings.ajaxCallBackPrefix+"/node/update-field-terms-conditions-date";
       
  dataga=attr.dataga.value;
  
  //_gaq('send', 'pageview', dataga);
	(function( $ ) {
		$.ajax(
		            {
		                type : "POST",
		                async:    false,
		                dataType : "text",
		                // 'your_php_file' must be an ABSOLUT or RELATIVE path!
		                url: pathUrl,
		                // 'elem' is a variable containing the download name
		                // you can call it in your php file through $_POST['download_name']
		                //data: { download_name: elem },
		                // here we go magic:
		                // after the request is done run the popup for the download
		                complete: function()
		                {
		                  //_gaq.push(["_trackPageview",dataga]);  
										gtag('event', 'page_view', 
										{
									    page_title: dataga,
									    page_location: dataga,
									    page_path: dataga,
									    send_to: Drupal.settings.google_analytics
										});
										gtag('event', 'page_view', 
										{
									    page_title: dataga,
									    page_location: dataga,
									    page_path: dataga,
									    send_to: Drupal.settings.google_analytics_ga4
										});		                  
                      document.location.href="/";
		                }
		            }
		            )
	})( jQuery );
}
jQuery(document).ready(function( $ ) 
{
    $('#clickLabelSort').click(function() {
        openCustom($('#edit-sort-by'));        
        //$( "#edit-sort-by" ).trigger( "click" );
    });
		$('#clickLabelOrder').click(function() {
        openCustom($('#edit-sort-order'));
    });
});
function openCustom(elem) 
{
    if (document.createEvent) {
        var e = document.createEvent("MouseEvents");
        e.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        elem[0].dispatchEvent(e);
    } else if (element.fireEvent) {
        elem[0].fireEvent("onmousedown");
    }
}
/* COOKIES */
function showPrivacySettingsText(text)
{
	(function( $ ) 
	{ 
    if (Drupal.settings.eu_cookie_compliance && Drupal.settings.eu_cookie_compliance.popup_eu_only_js) 
    {    
      var url = Drupal.settings.basePath + Drupal.settings.pathPrefix + 'eu-cookie-compliance-check';
      var data = {};
      $.getJSON(url, data, function (data) {
        // If in the EU, show the compliance banner.
        //if (data.in_eu || data.in_usa_ca) 
        if (data.in_eu) 
        { 
          $('#showPrivacySettingText').html("| <a id='showPrivacySettings' onclick='showPrivacySettings();'>"+text+"</a>");                    
        }
      });
    }
  })( jQuery ); 
}
function showPrivacySettings()
{     
  try 
  {
    if (!Drupal.settings.eu_cookie_compliance.popup_enabled) {
      return;
    }

    if (!Drupal.eu_cookie_compliance.cookiesEnabled()) {
      return;
    }

    if (typeof Drupal.eu_cookie_compliance.getVersion() === 'undefined') {
      // If version doesn't exist as a cookie, set it to the current one.
      // For modules that update to this, it prevents needless retriggering
      // For first time runs, it makes no difference as the other IF statements
      // below will still cause the popup to trigger
      // For incrementing the version, it also makes no difference as either it's
      // a returning user and will have a version set, or it's a new user and
      // the other checks will trigger it.
      Drupal.eu_cookie_compliance.setVersion();
    }

    Drupal.eu_cookie_compliance.updateCheck();
    var versionChanged = Drupal.eu_cookie_compliance.getVersion() !== Drupal.settings.eu_cookie_compliance.cookie_policy_version;
    // Closed if status has a value and the version hasn't changed.
    //var closed = _euccCurrentStatus !== null && !versionChanged;
    var closed=false;
    var _euccCurrentStatus = Drupal.eu_cookie_compliance.getCurrentStatus()
    if ((_euccCurrentStatus === 0 && Drupal.settings.eu_cookie_compliance.method === 'default') || _euccCurrentStatus === null || (Drupal.settings.eu_cookie_compliance.withdraw_enabled && Drupal.settings.eu_cookie_compliance.withdraw_button_on_info_popup) || versionChanged) {
      if (Drupal.settings.eu_cookie_compliance.withdraw_enabled || !Drupal.settings.eu_cookie_compliance.disagree_do_not_show_popup || _euccCurrentStatus === null || versionChanged) {
        // Detect mobile here and use mobile_popup_html_info, if we have a mobile device.
        if (window.matchMedia('(max-width: ' + Drupal.settings.eu_cookie_compliance.mobile_breakpoint + 'px)').matches && Drupal.settings.eu_cookie_compliance.use_mobile_message) {
          Drupal.eu_cookie_compliance.createPopup(Drupal.settings.eu_cookie_compliance.mobile_popup_html_info, closed);
        }
        else {
          Drupal.eu_cookie_compliance.createPopup(Drupal.settings.eu_cookie_compliance.popup_html_info, closed);
        }

        Drupal.eu_cookie_compliance.initPopup();
        Drupal.eu_cookie_compliance.resizeListener();
      }
    }
    if (_euccCurrentStatus === 1 && Drupal.settings.eu_cookie_compliance.popup_agreed_enabled) {
      // Thank you banner.
      Drupal.eu_cookie_compliance.createPopup(Drupal.settings.eu_cookie_compliance.popup_html_agreed);
      Drupal.eu_cookie_compliance.attachHideEvents();
    }
    else if (_euccCurrentStatus === 2 && Drupal.settings.eu_cookie_compliance.withdraw_enabled) {
      if (!Drupal.settings.eu_cookie_compliance.withdraw_button_on_info_popup) {
        Drupal.eu_cookie_compliance.createWithdrawBanner(Drupal.settings.eu_cookie_compliance.withdraw_markup);
        Drupal.eu_cookie_compliance.resizeListener();
      }
      Drupal.eu_cookie_compliance.attachWithdrawEvents();
    }
  }
  catch (e) 
  {
  }
}
function hiddePrivacySettings()
{
 (function($) 
 {
  Drupal.eu_cookie_compliance.toggleWithdrawBanner();   
  $('.eu-cookie-withdraw-wrapper').attr("style", "display: none !important");
  $('.eu-cookie-withdraw-wrapper').css('bottom','0px');
 })(jQuery);
}
function showCategoriesAndTheirComplianceButtons()
{
 (function($) 
 {
  $(".eu-cookie-compliance-category").attr("style", "display: block !important;visibility: visible !important;");  
  $(".eu-cookie-compliance-categories-buttons").attr("style", "display: block !important;visibility: visible !important;");      
  $("#agree-button").html($("#agree-button-all-cookies").html());
 })(jQuery);
}
function acceptOnlyTechnicals()
{
 (function($) 
 {
    var categories = $("#eu-cookie-compliance-categories input:checkbox")
    categories.removeAttr('checked');
    Drupal.eu_cookie_compliance.setAcceptedCategories([]);
    Drupal.eu_cookie_compliance.setStatus(1);
    Drupal.eu_cookie_compliance.changeStatus(0);
    
 })(jQuery);
}
(function($) 
{  
  $( document ).on( "eu_cookie_compliance_popup_open",function( event) 
  {
    $('#sliding-popup').css('position','fixed');
    $('#sliding-popup').css('top','0px');
    $('.eu-cookie-compliance-banner-wrapper').css('position','fixed');
    $('.eu-cookie-compliance-banner-wrapper').css('bottom','0px');
    $('.eu-cookie-compliance-banner-wrapper').css('width','100%');
    $('.eu-cookie-compliance-banner-wrapper').css('height','auto'); 
    $('#showCategoriesAndTheirComplianceButtons').bind("click", function() 
    {
      showCategoriesAndTheirComplianceButtons();
    });
    if(window.location.pathname =='/privacy')
    {
      $( '#sliding-popup' ).each(function () 
      {
        this.style.setProperty( 'background-color', 'rgba(0,0,0,0.0)', 'important' );
       });      
    }  
  });
})(jQuery); 

// FONT LOADER
(function (document) {
    var loadScripts = function () 
    {
        var uaString = navigator.userAgent,
                isMobile = function () {
                    return uaString.indexOf('android') > -1 || uaString.indexOf('Android') > -1 || uaString.indexOf('Mobile') > -1 || uaString.indexOf('mobile') > -1 || uaString.indexOf('iPhone') > -1
                };

        this.styles = document.querySelectorAll('link[data-href]');
        for (var i = 0; i < this.styles.length; i++) {            
            if (this.styles[i].getAttribute('data-mobile') === 'false' && isMobile()) {
                return;
            }            
            this.styles[i].setAttribute('href', this.styles[i].getAttribute('data-href'));
        }        
    };    
    if (document.addEventListener) {
        document.addEventListener('DOMContentLoaded', loadScripts);
    } else {
        document.attachEvent('onreadystatechange', function (e) {
            if (document.readyState === "complete") {
                loadScripts();                
            }
        });
    }
}(document));                                                                                ;

/**
 * @file
 * Responsible for tracking lazy panes and replacing them through AJAX
 *
 * @todo Horrible, horrible looking code. Improve me!
 */

(function ($) {
  "use strict";

  var lazyPaneAJAX = {},
      lazyPanes = [];

  // Register to events
  // --------------------------------------------------------------------------

  Drupal.behaviors.lazyPaneLoad = {
    attach: function () {

      var $lazy_panes = $('.lazy-pane-placeholder').not('.processed'),
          ids = [];

      if ($lazy_panes.length) {
        $.each($lazy_panes, function () {
          var id = $(this).data('lazy-pane-id');

          switch ($(this).data('lazy-pane-load-strategy')) {
            case 'page-loaded':
              ids.push(id);
              break;

            case 'pane-visible':
              lazyPanes.push(this);
              break;
          }

          $(this).addClass('processed');
        });

        lazyPaneAJAX.request(ids);
        lazyPaneAJAX.checkPanesVisibility();
      }
    }
  };

  $(window).scroll(function () {
    lazyPaneAJAX.checkPanesVisibility();
  });

  $(window).resize(function () {
    lazyPaneAJAX.checkPanesVisibility();
  });

  // lazyPaneAJAX
  // --------------------------------------------------------------------------

  /**
   * Checks if panes are visible on the viewport, and requests them if they are.
   */
  lazyPaneAJAX.checkPanesVisibility = function () {
    if (!lazyPanes.length) {
      return;
    }

    var ids = [],
        w_width = $(window).width(),
        w_height = $(window).height(),
        w_top = $(window).scrollTop(),
        w_left = $(window).scrollLeft(),
        visible_y = w_top + w_height,
        visible_x = w_left + w_width,
        lazyPanesCopy = lazyPanes.slice(0);

    $.each(lazyPanesCopy, function () {
      var request = false,
          offset = $(this).offset();

      if (visible_y >= offset.top && visible_x >= offset.left) {
        request = true;
      }

      if (request) {
        ids.push($(this).data('lazy-pane-id'));
        lazyPanes.splice($.inArray(this, lazyPanes), 1);
      }
    });

    if (ids.length) {
      lazyPaneAJAX.request(ids);
    }
  };

  /**
   * Makes an AJAX request to load the lazy panes.
   *
   * @param ids
   *  An array of lazy-pane ids.
   */
  lazyPaneAJAX.request = function (ids) {
    if (!ids.length) {
      return;
    }

    var url = Drupal.settings.basePath + Drupal.settings.pathPrefix + 'lazy-pane/ajax';
    var data = $.extend({'lazy_pane_ids[]': ids}, {'lazy_pane_get' : this.getURLParams()});

    data['ajax_page_state[theme]'] = Drupal.settings.ajaxPageState.theme;
    data['ajax_page_state[theme_token]'] = Drupal.settings.ajaxPageState.theme_token;
    data['lazy_pane_current_path'] = Drupal.settings.lazy_pane.current_path;

    for (var key in Drupal.settings.ajaxPageState.css) {
      data['ajax_page_state[css][' + key + ']'] = 1;
    }

    for (var key in Drupal.settings.ajaxPageState.js) {
      data['ajax_page_state[js][' + key + ']'] = 1;
    }

    $.post(url, data, function (response, status) 
    {
      lazyPaneAJAX.success(response, status);
    }, 'json');
  };

  /**
   * Processes a successful lazy-pane AJAX response.
   */
  lazyPaneAJAX.success = function (response, status) {
    
	    Drupal.freezeHeight();			
	    for (var i in response) {
	      if (response[i]['command'] && this.commands[response[i]['command']]) {
	        this.commands[response[i]['command']](response[i], status);
	      }
	    }
	    Drupal.unfreezeHeight();	  
  };

  /**
   * An object that hosts execution commands supported by lazy-pane.
   */
  lazyPaneAJAX.commands = {

    insert: function (response, status) {
    	var output=response.data;
    	if(status!="success")
    	{    		
  			output="No data";
  		}
      var $wrappers = $(response.selector),
          method = response.method,
          settings = response.settings || Drupal.settings;

      $wrappers.each(function (index, el) {
        var $wrapper = $(el),
            $wrapped_contents = $('<div></div>').html(output).hide(),
            contents = $wrapped_contents.contents();

        $wrapper[method]($wrapped_contents);
        $wrapped_contents.fadeIn(600, function () {
          Drupal.attachBehaviors(contents, settings);
        });
      });
    },

    settings: function (response, status) {
      if (response.merge) {
        $.extend(true, Drupal.settings, response.settings);
      }
    }
  };

  /**
   * Extracts GET params from the URL.
   */
  lazyPaneAJAX.getURLParams = function () {
    var location = document.location.search,
        params = {},
        tokens,
        regexp = /[?&]?([^=]+)=([^&]*)/g;

    while ((tokens = regexp.exec(location)) !== null) {
      params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
    }

    return params;
  };

}(jQuery));
;
